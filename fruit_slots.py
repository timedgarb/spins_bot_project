import random
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from config import STICKER_IDS, SPIN_DELAY, ULTRA_ANIMATION_FRAMES, ULTRA_MULTIPLIERS, ULTRA_SYMBOLS

class FruitSlots:
    def __init__(self):
        self.symbols = ULTRA_SYMBOLS["fruit"]["common"] + ULTRA_SYMBOLS["fruit"]["rare"] + ULTRA_SYMBOLS["fruit"]["epic"] + ULTRA_SYMBOLS["fruit"]["legendary"]
        self.name = "Fruit Slots ULTRA"
        self.rows = 3
        self.cols = 3
    
    async def spin_with_animation(self, bet: int, update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int):
        chat_id = update.effective_chat.id
        final_reels = self.generate_ultra_reels()
        win_amount, multiplier, lines, jackpot, epic_win = self.calculate_ultra_win(final_reels, bet)
        
        # –£–õ–¨–¢–†–ê-–°–ò–ö–í–ï–ù–° –ê–ù–ò–ú–ê–¶–ò–ò
        await self.ultra_cinematic_sequence(update, context, message_id, bet, final_reels, chat_id)
        
        # –ú–ï–ì–ê-–§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        result_data = await self.create_epic_result(final_reels, win_amount, multiplier, lines, jackpot, epic_win, bet)
        
        return result_data
    
    def generate_ultra_reels(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—å—Ç—Ä–∞-—Ä–µ–µ–ª—Å–æ–≤ —Å –≤–µ—Å–∞–º–∏"""
        reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –í–µ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
                weights = [50, 30, 15, 5]  # common, rare, epic, legendary
                symbol_pool = []
                for idx, weight in enumerate(weights):
                    symbol_pool.extend([ULTRA_SYMBOLS["fruit"][list(ULTRA_SYMBOLS["fruit"].keys())[idx]][0]] * weight)
                
                row.append(random.choice(symbol_pool))
            reels.append(row)
        return reels
    
    async def ultra_cinematic_sequence(self, update, context, message_id, bet, final_reels, chat_id):
        """–£–õ–¨–¢–†–ê-–ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        phases = ULTRA_ANIMATION_FRAMES["fruit"]["phases"]
        
        for phase_idx, phase in enumerate(phases):
            phase_text = phase["text"]
            frames = phase["frames"]
            effects = phase["effects"]
            
            for frame_idx, frame in enumerate(frames):
                # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç—Ä–∞-–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
                progress = (phase_idx * len(frames) + frame_idx) / (len(phases) * len(frames))
                temp_reels = self.create_cinematic_reels(final_reels, progress, effects)
                
                # –£–ª—å—Ç—Ä–∞-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏
                board = self.format_cinematic_board(temp_reels, effects, frame_idx)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = self.create_epic_message(phase_text, frame, board, bet, effects, progress)
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                dynamic_delay = self.calculate_cinematic_delay(phase_idx, frame_idx, progress)
                await asyncio.sleep(dynamic_delay)
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –®–û–£–ö–ï–ô–°
        await self.final_showcase(update, context, message_id, final_reels, bet, chat_id)
    
    def create_cinematic_reels(self, final_reels, progress, effects):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        temp_reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                reveal_chance = min(1.0, progress * 1.5 + random.random() * 0.3)
                
                if random.random() < reveal_chance:
                    row.append(final_reels[i][j])
                else:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑
                    if "rainbow" in effects:
                        row.append(random.choice(["üåà", "üéØ", "‚ú®"]))
                    elif "turbo" in effects:
                        row.append(random.choice(["‚ö°", "üí´", "üåü"]))
                    else:
                        row.append(random.choice(self.symbols))
            temp_reels.append(row)
        return temp_reels
    
    def format_cinematic_board(self, reels, effects, frame_idx):
        """–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for i, row in enumerate(reels):
            formatted_row = []
            for j, symbol in enumerate(row):
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                if "glow" in effects and frame_idx % 2 == 0:
                    formatted_symbol = f"‚ú®{symbol}"
                elif "vibrate" in effects:
                    formatted_symbol = f"üåÄ{symbol}"
                elif "rainbow" in effects:
                    formatted_symbol = f"üåà{symbol}"
                else:
                    formatted_symbol = symbol
                formatted_row.append(formatted_symbol)
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def create_epic_message(self, phase_text, frame, board, bet, effects, progress):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        progress_bar = self.create_progress_bar(progress)
        effect_emojis = " ".join(["‚ú®"] * int(progress * 5))
        
        return (
            f"{phase_text}"
            f"{frame} {frame} {frame}\n\n"
            f"{board}\n"
            f"{progress_bar}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô {effect_emojis}\n"
            f"üé¨ *–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: {int(progress * 100)}%*"
        )
    
    def create_progress_bar(self, progress, length=20):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = int(progress * length)
        empty = length - filled
        return f"‚ñ∞{'‚ñ∞' * filled}{'‚ñ±' * empty}‚ñ∞"
    
    def calculate_cinematic_delay(self, phase_idx, frame_idx, progress):
        """–†–∞—Å—á–µ—Ç –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        base_delay = SPIN_DELAY
        
        # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
        if progress < 0.3:
            return base_delay * 0.8  # –ë—ã—Å—Ç—Ä–µ–µ –≤ –Ω–∞—á–∞–ª–µ
        elif progress > 0.7:
            return base_delay * 1.5  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –≤ –∫–æ–Ω—Ü–µ
        else:
            return base_delay
    
    async def final_showcase(self, update, context, message_id, final_reels, bet, chat_id):
        """–§–ò–ù–ê–õ–¨–ù–´–ô –®–û–£–ö–ï–ô–° –° –≠–§–§–ï–ö–¢–ê–ú–ò"""
        showcase_effects = ["üí•", "üéä", "üéâ", "üèÜ", "üí∞", "üëë"]
        
        for i in range(6):
            # –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            effect = showcase_effects[i % len(showcase_effects)]
            
            if i % 2 == 0:
                # –≠—Ñ—Ñ–µ–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                board = self.format_showcase_board(final_reels, effect, True)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è
                board = self.format_showcase_board(final_reels, effect, False)
            
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üé∞ *Fruit Slots ULTRA*\n\n{effect} *–§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!* {effect}\n\n{board}\nüí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô",
                parse_mode='Markdown'
            )
            await asyncio.sleep(0.4)
    
    def format_showcase_board(self, reels, effect, enhanced=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–ª—è —à–æ—É–∫–µ–π—Å–∞"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for row in reels:
            if enhanced:
                formatted_row = [f"{effect}{symbol}" for symbol in row]
            else:
                formatted_row = row
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    async def create_epic_result(self, final_reels, win_amount, multiplier, lines, jackpot, epic_win, bet):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ø–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        board = self.format_ultra_board(final_reels, lines if win_amount > 0 else [])
        
        if epic_win:
            result_emoji = "üëë"
            result_text = f"*–≠–ü–ò–ß–ï–°–ö–ê–Ø –ü–û–ë–ï–î–ê!* üåü"
            win_info = f"üí∞ *–ù–ï–í–ï–†–û–Ø–¢–ù–´–ô –í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üéä"
            sticker_id = STICKER_IDS["epic_win"]
        elif jackpot:
            result_emoji = "üéä"
            result_text = f"*–î–ñ–ï–ö–ü–û–¢!* üé∞"
            win_info = f"üí∞ *–ì–†–ê–ù–î-–í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üéâ"
            sticker_id = STICKER_IDS["jackpot"]
        elif win_amount > 0:
            result_emoji = "üéâ"
            result_text = f"*–ü–û–ë–ï–î–ê!* üèÜ"
            win_info = f"üí∞ *–í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!* (x{multiplier})"
            sticker_id = STICKER_IDS["win"]
        else:
            result_emoji = "üé∞"
            result_text = f"*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!* üí´"
            win_info = f"üí∏ *–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç*"
            sticker_id = STICKER_IDS["lose"]
        
        result_message = (
            f"üé∞ *Fruit Slots ULTRA - –†–ï–ó–£–õ–¨–¢–ê–¢!* {result_emoji}\n\n"
            f"{board}\n"
            f"‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞\n"
            f"{result_text}\n"
            f"{win_info}\n"
        )
        
        if lines and win_amount > 0:
            result_message += f"üìà *–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏:* {', '.join(lines)}\n"
        
        if epic_win:
            result_message += f"\nüåü *–≠–ü–ò–ß–ï–°–ö–ê–Ø –£–î–ê–ß–ê!* üåü\n"
            result_message += f"üéØ *–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–µ–∑–µ–Ω–∏—è!* üëë\n"
        elif jackpot:
            result_message += f"\nüé∞ *–î–ñ–ï–ö–ü–û–¢ –°–û–†–í–ê–ù!* üé∞\n"
            result_message += f"üíé *–§—Ä—É–∫—Ç–æ–≤–æ–µ –±–µ–∑—É–º–∏–µ!* üçíüçãüçä\n"
        
        return result_message, win_amount, sticker_id
    
    def format_ultra_board(self, reels, winning_lines):
        """–£–ª—å—Ç—Ä–∞-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"""
        if not winning_lines:
            return self.format_showcase_board(reels, "", False)
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—å—Ç—Ä–∞-–ø–æ–¥—Å–≤–µ—á–µ–Ω–Ω—É—é –¥–æ—Å–∫—É
        highlighted = [row.copy() for row in reels]
        
        for line in winning_lines:
            if "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å" in line:
                i = int(line.split()[1]) - 1
                for j in range(3):
                    highlighted[i][j] = f"üéØ{highlighted[i][j]}"
            elif "–í–µ—Ä—Ç–∏–∫–∞–ª—å" in line:
                j = int(line.split()[1]) - 1
                for i in range(3):
                    highlighted[i][j] = f"üéØ{highlighted[i][j]}"
            elif "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜòÔ∏è" in line:
                for i in range(3):
                    highlighted[i][i] = f"üéØ{highlighted[i][i]}"
            elif "–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜôÔ∏è" in line:
                for i in range(3):
                    highlighted[i][2-i] = f"üéØ{highlighted[i][2-i]}"
        
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        for row in highlighted:
            board += "‚îÇ " + " ".join(row) + " ‚îÇ\n"
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def calculate_ultra_win(self, reels, bet):
        """–£–ª—å—Ç—Ä–∞-—Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
        lines = []
        multiplier = 0
        jackpot = False
        epic_win = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–Ω–∏–π —Å —É–ª—å—Ç—Ä–∞-–±–æ–Ω—É—Å–∞–º–∏
        for i in range(self.rows):
            if reels[i][0] == reels[i][1] == reels[i][2]:
                lines.append(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å {i+1}")
                symbol_multiplier = self.get_symbol_multiplier(reels[i][0])
                multiplier += symbol_multiplier
        
        for j in range(self.cols):
            if reels[0][j] == reels[1][j] == reels[2][j]:
                lines.append(f"–í–µ—Ä—Ç–∏–∫–∞–ª—å {j+1}")
                symbol_multiplier = self.get_symbol_multiplier(reels[0][j])
                multiplier += symbol_multiplier
        
        if reels[0][0] == reels[1][1] == reels[2][2]:
            lines.append("–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜòÔ∏è")
            multiplier += ULTRA_MULTIPLIERS["fruit"]["diagonal"]
        
        if reels[0][2] == reels[1][1] == reels[2][0]:
            lines.append("–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜôÔ∏è")
            multiplier += ULTRA_MULTIPLIERS["fruit"]["diagonal"]
        
        # –î–∂–µ–∫–ø–æ—Ç –∏ —ç–ø–∏—á–µ—Å–∫–∏–µ –ø–æ–±–µ–¥—ã
        all_symbols = [symbol for row in reels for symbol in row]
        
        # –≠–ø–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞ (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ)
        if all(symbol in ULTRA_SYMBOLS["fruit"]["legendary"] for symbol in all_symbols):
            epic_win = True
            multiplier += 100
        
        # –î–∂–µ–∫–ø–æ—Ç (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
        elif len(set(all_symbols)) == 1:
            jackpot = True
            multiplier += ULTRA_MULTIPLIERS["fruit"]["jackpot"]
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for symbol in set(all_symbols):
            count = all_symbols.count(symbol)
            if count >= 7:
                multiplier += 5
            if count >= 8:
                multiplier += 3
        
        # –§—Ä—É–∫—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
        fruit_count = sum(1 for symbol in all_symbols if symbol in ["üçí", "üçã", "üçä", "üçá", "üçâ"])
        if fruit_count >= 6:
            multiplier += ULTRA_MULTIPLIERS["fruit"]["fruit_bonus"]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å –Ω–∞ —ç–ø–∏—á–µ—Å–∫—É—é –ø–æ–±–µ–¥—É
        if random.random() < 0.005:  # 0.5% —à–∞–Ω—Å
            epic_win = True
            multiplier *= 2
        
        win_amount = bet * multiplier if multiplier > 0 else -bet
        return win_amount, multiplier, lines, jackpot, epic_win
    
    def get_symbol_multiplier(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if symbol in ULTRA_SYMBOLS["fruit"]["legendary"]:
            return ULTRA_MULTIPLIERS["fruit"]["special_symbol"] * 2
        elif symbol in ULTRA_SYMBOLS["fruit"]["epic"]:
            return ULTRA_MULTIPLIERS["fruit"]["special_symbol"]
        elif symbol in ULTRA_SYMBOLS["fruit"]["rare"]:
            return ULTRA_MULTIPLIERS["fruit"]["three_horizontal"] * 1.5
        else:
            return ULTRA_MULTIPLIERS["fruit"]["three_horizontal"]