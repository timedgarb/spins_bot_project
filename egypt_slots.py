import random
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from config import STICKER_IDS, SPIN_DELAY, ULTRA_ANIMATION_FRAMES, ULTRA_MULTIPLIERS, ULTRA_SYMBOLS

class EgyptSlotsULTRA:
    def __init__(self):
        self.symbols = (ULTRA_SYMBOLS["egypt"]["common"] + 
                       ULTRA_SYMBOLS["egypt"]["rare"] + 
                       ULTRA_SYMBOLS["egypt"]["epic"] + 
                       ULTRA_SYMBOLS["egypt"]["legendary"])
        self.name = "Egypt Slots ULTRA"
        self.rows = 4
        self.cols = 4
    
    async def spin_with_animation(self, bet: int, update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int):
        chat_id = update.effective_chat.id
        final_reels = self.generate_egypt_reels()
        win_amount, multiplier, lines, pharaoh_bonus, royal_treasure = self.calculate_egypt_win(final_reels, bet)
        
        # –ï–ì–ò–ü–ï–¢–°–ö–ê–Ø –°–ò–ö–í–ï–ù–° –ê–ù–ò–ú–ê–¶–ò–ò
        await self.egypt_cinematic_sequence(update, context, message_id, bet, final_reels, chat_id)
        
        # –§–ê–†–ê–û–ù–°–ö–ò–ô –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        result_data = await self.create_pharaoh_result(final_reels, win_amount, multiplier, lines, pharaoh_bonus, royal_treasure, bet)
        
        return result_data
    
    def generate_egypt_reels(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö —Ä–µ–µ–ª—Å–æ–≤ —Å –∏–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Å–∞–º–∏"""
        reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ò–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–∞—è –≤–µ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
                weights = [35, 30, 25, 10]  # common, rare, epic, legendary
                symbol_pool = []
                categories = list(ULTRA_SYMBOLS["egypt"].keys())
                
                for idx, weight in enumerate(weights):
                    symbol_pool.extend([ULTRA_SYMBOLS["egypt"][categories[idx]][0]] * weight)
                
                # –ï–≥–∏–ø–µ—Ç—Å–∫–∏–π –±–æ–Ω—É—Å: —Ü–µ–Ω—Ç—Ä –ø–∏—Ä–∞–º–∏–¥—ã –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å
                if (1 <= i <= 2) and (1 <= j <= 2):
                    symbol_pool.extend(ULTRA_SYMBOLS["egypt"]["epic"] * 5)
                    symbol_pool.extend(ULTRA_SYMBOLS["egypt"]["legendary"] * 2)
                
                row.append(random.choice(symbol_pool))
            reels.append(row)
        return reels
    
    async def egypt_cinematic_sequence(self, update, context, message_id, bet, final_reels, chat_id):
        """–ï–ì–ò–ü–ï–¢–°–ö–ê–Ø –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        phases = ULTRA_ANIMATION_FRAMES["egypt"]["phases"]
        
        for phase_idx, phase in enumerate(phases):
            phase_text = phase["text"]
            frames = phase["frames"]
            effects = phase["effects"]
            
            for frame_idx, frame in enumerate(frames):
                # –°–æ–∑–¥–∞–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
                progress = (phase_idx * len(frames) + frame_idx) / (len(phases) * len(frames))
                temp_reels = self.create_pyramid_reels(final_reels, progress, effects)
                
                # –ò–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏
                board = self.format_pyramid_board(temp_reels, effects, frame_idx)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = self.create_egypt_message(phase_text, frame, board, bet, effects, progress)
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –ï–≥–∏–ø–µ—Ç—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥–∞–¥–æ—á–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                egypt_delay = self.calculate_egypt_delay(phase_idx, frame_idx, progress)
                await asyncio.sleep(egypt_delay)
        
        # –§–ê–†–ê–û–ù–°–ö–ò–ô –®–û–£–ö–ï–ô–°
        await self.pharaoh_showcase(update, context, message_id, final_reels, bet, chat_id)
    
    def create_pyramid_reels(self, final_reels, progress, effects):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        temp_reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
                reveal_chance = min(1.0, progress * 1.2 + ((i+j)/(self.rows+self.cols)) * 0.6)
                
                if random.random() < reveal_chance:
                    row.append(final_reels[i][j])
                else:
                    # –ï–≥–∏–ø–µ—Ç—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑
                    if "sandstorm" in effects:
                        row.append(random.choice(["üèúÔ∏è", "üåµ", "üê´", "ü¶Ç"]))
                    elif "gold_glow" in effects:
                        row.append(random.choice(["üíé", "üëë", "‚ö±Ô∏è", "üè∫"]))
                    else:
                        row.append(random.choice(self.symbols))
            temp_reels.append(row)
        return temp_reels
    
    def format_pyramid_board(self, reels, effects, frame_idx):
        """–ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for i, row in enumerate(reels):
            formatted_row = []
            for j, symbol in enumerate(row):
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                if "hieroglyph_reveal" in effects and frame_idx % 4 == 0:
                    formatted_symbol = f"üìú{symbol}"
                elif "torch_light" in effects and (i + j) % 2 == 0:
                    formatted_symbol = f"ü™î{symbol}"
                elif "divine_light" in effects:
                    formatted_symbol = f"üåü{symbol}"
                else:
                    formatted_symbol = symbol
                formatted_row.append(formatted_symbol)
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def create_egypt_message(self, phase_text, frame, board, bet, effects, progress):
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        progress_bar = self.create_pyramid_progress_bar(progress)
        effect_emojis = " ".join(["üî±"] * int(progress * 5))
        
        return (
            f"{phase_text}"
            f"{frame} {frame} {frame}\n\n"
            f"{board}\n"
            f"{progress_bar}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô {effect_emojis}\n"
            f"üê´ *–†–µ–∂–∏–º —Ñ–∞—Ä–∞–æ–Ω–∞: {int(progress * 100)}%*"
        )
    
    def create_pyramid_progress_bar(self, progress, length=20):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = int(progress * length)
        empty = length - filled
        return f"üî∫{'üî∏' * filled}{'‚ñ´Ô∏è' * empty}üî∫"
    
    def calculate_egypt_delay(self, phase_idx, frame_idx, progress):
        """–†–∞—Å—á–µ—Ç –µ–≥–∏–ø–µ—Ç—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        base_delay = SPIN_DELAY
        
        # –ó–∞–≥–∞–¥–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if "ritual_fire" in ULTRA_ANIMATION_FRAMES["egypt"]["phases"][phase_idx]["effects"]:
            return base_delay * 0.8  # –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∏—Ç—É–∞–ª–∞
        elif progress > 0.85:
            return base_delay * 2.0  # –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
        else:
            return base_delay
    
    async def pharaoh_showcase(self, update, context, message_id, final_reels, bet, chat_id):
        """–§–ê–†–ê–û–ù–°–ö–ò–ô –®–û–£–ö–ï–ô–°"""
        pharaoh_effects = ["üëë", "‚ö±Ô∏è", "üíé", "üî±", "üè∫", "üê´", "ü¶Ç", "üìú"]
        
        for i in range(7):
            effect = pharaoh_effects[i % len(pharaoh_effects)]
            
            if i % 2 == 0:
                board = self.format_pharaoh_showcase_board(final_reels, effect, True)
            else:
                board = self.format_pharaoh_showcase_board(final_reels, effect, False)
            
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üê´ *Egypt Slots ULTRA*\n\n{effect} *–§–ê–†–ê–û–ù–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢!* {effect}\n\n{board}\nüí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô",
                parse_mode='Markdown'
            )
            await asyncio.sleep(0.45)
    
    def format_pharaoh_showcase_board(self, reels, effect, enhanced=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–ª—è —Ñ–∞—Ä–∞–æ–Ω—Å–∫–æ–≥–æ —à–æ—É–∫–µ–π—Å–∞"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for row in reels:
            if enhanced:
                formatted_row = [f"{effect}{symbol}" for symbol in row]
            else:
                formatted_row = row
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    async def create_pharaoh_result(self, final_reels, win_amount, multiplier, lines, pharaoh_bonus, royal_treasure, bet):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞—Ä–∞–æ–Ω—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        board = self.format_ultra_egypt_board(final_reels, lines if win_amount > 0 else [])
        
        if royal_treasure:
            result_emoji = "üíé"
            result_text = f"*–ö–û–†–û–õ–ï–í–°–ö–û–ï –°–û–ö–†–û–í–ò–©–ï!* üëë"
            win_info = f"üí∞ *–í–ï–õ–ò–ö–ò–ô –í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üèÜ"
            sticker_id = STICKER_IDS["epic_win"]
        elif pharaoh_bonus:
            result_emoji = "üëë"
            result_text = f"*–ë–õ–ê–ì–û–°–õ–û–í–ï–ù–ò–ï –§–ê–†–ê–û–ù–ê!* ‚ö±Ô∏è"
            win_info = f"üí∞ *–§–ê–†–ê–û–ù–°–ö–ò–ô –í–´–ò–ì–†–´–®: {win_amount} –º–æ–Ω–µ—Ç!* üíé"
            sticker_id = STICKER_IDS["jackpot"]
        elif win_amount > 0:
            result_emoji = "üéâ"
            result_text = f"*–°–û–ö–†–û–í–ò–©–ê –ü–ò–†–ê–ú–ò–î–´!* üî±"
            win_info = f"üí∞ *–í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!* (x{multiplier})"
            sticker_id = STICKER_IDS["win"]
        else:
            result_emoji = "üê´"
            result_text = f"*–ü–£–¢–¨ –ö –°–û–ö–†–û–í–ò–©–ê–ú –ü–†–û–î–û–õ–ñ–ê–ï–¢–°–Ø!* üèúÔ∏è"
            win_info = f"üí∏ *–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç*"
            sticker_id = STICKER_IDS["lose"]
        
        result_message = (
            f"üê´ *Egypt Slots ULTRA - –†–ï–ó–£–õ–¨–¢–ê–¢!* {result_emoji}\n\n"
            f"{board}\n"
            f"üëë‚ö±Ô∏èüíéüî±üè∫üê´ü¶ÇüìúüåµüèúÔ∏è\n"
            f"{result_text}\n"
            f"{win_info}\n"
        )
        
        if lines and win_amount > 0:
            result_message += f"üìú *–°–∞–∫—Ä–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏:* {', '.join(lines)}\n"
        
        if royal_treasure:
            result_message += f"\nüíé *–ö–û–†–û–õ–ï–í–°–ö–ê–Ø –£–î–ê–ß–ê!* üëë\n"
            result_message += f"üèÜ *–°–æ–∫—Ä–æ–≤–∏—â–∞ —Ñ–∞—Ä–∞–æ–Ω–æ–≤ –≤–∞—à–∏!* ‚ö±Ô∏è\n"
        elif pharaoh_bonus:
            result_message += f"\nüëë *–ë–õ–ê–ì–û–°–õ–û–í–ï–ù–ò–ï –§–ê–†–ê–û–ù–ê!* ‚ö±Ô∏è\n"
            result_message += f"üåü *–î—Ä–µ–≤–Ω–∏–µ –±–æ–≥–∏ —Å –≤–∞–º–∏!* üî±\n"
        
        return result_message, win_amount, sticker_id
    
    def format_ultra_egypt_board(self, reels, winning_lines):
        """–£–ª—å—Ç—Ä–∞-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–æ–π –¥–æ—Å–∫–∏"""
        if not winning_lines:
            return self.format_pharaoh_showcase_board(reels, "", False)
        
        highlighted = [row.copy() for row in reels]
        
        for line in winning_lines:
            if "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å" in line:
                i = int(line.split()[1]) - 1
                for j in range(self.cols):
                    highlighted[i][j] = f"üíé{highlighted[i][j]}"
            elif "–í–µ—Ä—Ç–∏–∫–∞–ª—å" in line:
                j = int(line.split()[1]) - 1
                for i in range(self.rows):
                    highlighted[i][j] = f"üíé{highlighted[i][j]}"
            elif "–ö–≤–∞–¥—Ä–∞—Ç" in line:
                coords = line.split()[-1].split('-')
                i, j = int(coords[0]), int(coords[1])
                for x in range(i, i+2):
                    for y in range(j, j+2):
                        highlighted[x][y] = f"üíé{highlighted[x][y]}"
        
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        for row in highlighted:
            board += "‚îÇ " + " ".join(row) + " ‚îÇ\n"
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def calculate_egypt_win(self, reels, bet):
        """–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
        lines = []
        multiplier = 0
        pharaoh_bonus = False
        royal_treasure = False
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (4 —Å–∏–º–≤–æ–ª–∞)
        for i in range(self.rows):
            for j in range(self.cols - 3):
                if reels[i][j] == reels[i][j+1] == reels[i][j+2] == reels[i][j+3]:
                    lines.append(f"–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å {i+1}-{j+1}")
                    symbol_multiplier = self.get_egypt_symbol_multiplier(reels[i][j])
                    multiplier += symbol_multiplier
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (4 —Å–∏–º–≤–æ–ª–∞)
        for j in range(self.cols):
            for i in range(self.rows - 3):
                if reels[i][j] == reels[i+1][j] == reels[i+2][j] == reels[i+3][j]:
                    lines.append(f"–í–µ—Ä—Ç–∏–∫–∞–ª—å {j+1}-{i+1}")
                    symbol_multiplier = self.get_egypt_symbol_multiplier(reels[i][j])
                    multiplier += symbol_multiplier
        
        # –ö–≤–∞–¥—Ä–∞—Ç—ã 2x2
        for i in range(self.rows - 1):
            for j in range(self.cols - 1):
                if (reels[i][j] == reels[i][j+1] == reels[i+1][j] == reels[i+1][j+1]):
                    lines.append(f"–ö–≤–∞–¥—Ä–∞—Ç {i+1}-{j+1}")
                    multiplier += ULTRA_MULTIPLIERS["egypt"]["square"]
        
        # –ë–æ–Ω—É—Å —Ñ–∞—Ä–∞–æ–Ω–∞
        if self.check_pharaoh_bonus(reels):
            pharaoh_bonus = True
            multiplier += ULTRA_MULTIPLIERS["egypt"]["pharaoh_bonus"]
        
        # –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        if self.check_pyramid_combo(reels):
            multiplier += ULTRA_MULTIPLIERS["egypt"]["pyramid_combo"]
        
        # –ò–µ—Ä–æ–≥–ª–∏—Ñ–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å
        scroll_count = sum(row.count("üìú") for row in reels)
        if scroll_count >= 3:
            multiplier += ULTRA_MULTIPLIERS["egypt"]["hieroglyph_bonus"]
        
        # –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ
        if self.check_royal_treasure(reels):
            royal_treasure = True
            multiplier += ULTRA_MULTIPLIERS["egypt"]["royal_treasure"]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å –Ω–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ
        if random.random() < 0.002:  # 0.2% —à–∞–Ω—Å
            royal_treasure = True
            multiplier *= 4
        
        win_amount = bet * multiplier if multiplier > 0 else -bet
        return win_amount, multiplier, lines, pharaoh_bonus, royal_treasure
    
    def get_egypt_symbol_multiplier(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–∏–ø–µ—Ç—Å–∫–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è"""
        if symbol in ULTRA_SYMBOLS["egypt"]["legendary"]:
            return ULTRA_MULTIPLIERS["egypt"]["four_horizontal"] * 2.5
        elif symbol in ULTRA_SYMBOLS["egypt"]["epic"]:
            return ULTRA_MULTIPLIERS["egypt"]["four_horizontal"] * 1.8
        elif symbol in ULTRA_SYMBOLS["egypt"]["rare"]:
            return ULTRA_MULTIPLIERS["egypt"]["four_horizontal"] * 1.3
        else:
            return ULTRA_MULTIPLIERS["egypt"]["four_horizontal"]
    
    def check_pharaoh_bonus(self, reels):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ —Ñ–∞—Ä–∞–æ–Ω–∞"""
        # –§–∞—Ä–∞–æ–Ω—Å–∫–∏–π –±–æ–Ω—É—Å: –∫–æ—Ä–æ–Ω–∞ –∏ —Å–∞—Ä–∫–æ—Ñ–∞–≥ –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–∏—Ä–∞–º–∏–¥—ã
        center_symbols = [reels[1][1], reels[1][2], reels[2][1], reels[2][2]]
        return "üëë" in center_symbols and "‚ö±Ô∏è" in center_symbols
    
    def check_pyramid_combo(self, reels):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏"""
        # –ü–∏—Ä–∞–º–∏–¥–∞: —É–≥–ª—ã + —Ü–µ–Ω—Ç—Ä –æ–±—Ä–∞–∑—É—é—Ç –ø–∏—Ä–∞–º–∏–¥—É
        pyramid_positions = [(0,1), (0,2), (1,0), (1,3), (2,0), (2,3), (3,1), (3,2)]
        pyramid_symbols = [reels[i][j] for i, j in pyramid_positions]
        return len(set(pyramid_symbols)) == 1
    
    def check_royal_treasure(self, reels):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ —Å–æ–∫—Ä–æ–≤–∏—â–∞"""
        # –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–µ —Å–æ–∫—Ä–æ–≤–∏—â–µ: –≤—Å–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        all_symbols = [symbol for row in reels for symbol in row]
        return all(symbol in ULTRA_SYMBOLS["egypt"]["legendary"] for symbol in all_symbols)