import random
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from config import STICKER_IDS, SPIN_DELAY, ULTRA_ANIMATION_FRAMES, ULTRA_MULTIPLIERS, ULTRA_SYMBOLS

class CosmicJackpotULTRA:
    def __init__(self):
        self.symbols = (ULTRA_SYMBOLS["cosmic"]["common"] + 
                       ULTRA_SYMBOLS["cosmic"]["rare"] + 
                       ULTRA_SYMBOLS["cosmic"]["epic"] + 
                       ULTRA_SYMBOLS["cosmic"]["legendary"])
        self.name = "Cosmic Jackpot ULTRA"
        self.rows = 3
        self.cols = 5
    
    async def spin_with_animation(self, bet: int, update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int):
        chat_id = update.effective_chat.id
        final_reels = self.generate_cosmic_reels()
        win_amount, multiplier, lines, cosmic_jackpot, alien_invasion = self.calculate_cosmic_win(final_reels, bet)
        
        # –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –°–ò–ö–í–ï–ù–° –ê–ù–ò–ú–ê–¶–ò–ò
        await self.cosmic_cinematic_sequence(update, context, message_id, bet, final_reels, chat_id)
        
        # –ì–ê–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        result_data = await self.create_galactic_result(final_reels, win_amount, multiplier, lines, cosmic_jackpot, alien_invasion, bet)
        
        return result_data
    
    def generate_cosmic_reels(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–µ–ª—Å–æ–≤ —Å –∫–≤–∞–Ω—Ç–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏"""
        reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ö–≤–∞–Ω—Ç–æ–≤–∞—è –≤–µ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
                weights = [45, 25, 20, 10]  # common, rare, epic, legendary
                symbol_pool = []
                categories = list(ULTRA_SYMBOLS["cosmic"].keys())
                
                for idx, weight in enumerate(weights):
                    symbol_pool.extend([ULTRA_SYMBOLS["cosmic"][categories[idx]][0]] * weight)
                
                # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å: —à–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫–∏–π —Å–∏–º–≤–æ–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫ –∫—Ä–∞—è–º
                if j == 0 or j == self.cols - 1:
                    symbol_pool.extend(ULTRA_SYMBOLS["cosmic"]["epic"] * 5)
                
                row.append(random.choice(symbol_pool))
            reels.append(row)
        return reels
    
    async def cosmic_cinematic_sequence(self, update, context, message_id, bet, final_reels, chat_id):
        """–ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        phases = ULTRA_ANIMATION_FRAMES["cosmic"]["phases"]
        
        for phase_idx, phase in enumerate(phases):
            phase_text = phase["text"]
            frames = phase["frames"]
            effects = phase["effects"]
            
            for frame_idx, frame in enumerate(frames):
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
                progress = (phase_idx * len(frames) + frame_idx) / (len(phases) * len(frames))
                temp_reels = self.create_galactic_reels(final_reels, progress, effects)
                
                # –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏
                board = self.format_galactic_board(temp_reels, effects, frame_idx)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = self.create_cosmic_message(phase_text, frame, board, bet, effects, progress)
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–µ–∂–∑–≤–µ–∑–¥–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                cosmic_delay = self.calculate_cosmic_delay(phase_idx, frame_idx, progress)
                await asyncio.sleep(cosmic_delay)
        
        # –ú–ï–ñ–ì–ê–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –®–û–£–ö–ï–ô–°
        await self.galactic_showcase(update, context, message_id, final_reels, bet, chat_id)
    
    def create_galactic_reels(self, final_reels, progress, effects):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        temp_reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
                reveal_chance = min(1.0, progress * 1.3 + (j/self.cols) * 0.4)
                
                if random.random() < reveal_chance:
                    row.append(final_reels[i][j])
                else:
                    # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑
                    if "warp_speed" in effects:
                        row.append(random.choice(["üí´", "üå†", "‚ú®", "‚≠ê"]))
                    elif "alien_glow" in effects:
                        row.append(random.choice(["üëΩ", "üõ∏", "üëæ", "üî≠"]))
                    else:
                        row.append(random.choice(self.symbols))
            temp_reels.append(row)
        return temp_reels
    
    def format_galactic_board(self, reels, effects, frame_idx):
        """–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for i, row in enumerate(reels):
            formatted_row = []
            for j, symbol in enumerate(row):
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                if "star_trail" in effects and j > 0:
                    formatted_symbol = f"‚ú®{symbol}"
                elif "nebula_effect" in effects:
                    formatted_symbol = f"üåå{symbol}"
                elif "alien_glow" in effects and "üëΩ" in symbol:
                    formatted_symbol = f"üõ∏{symbol}"
                else:
                    formatted_symbol = symbol
                formatted_row.append(formatted_symbol)
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def create_cosmic_message(self, phase_text, frame, board, bet, effects, progress):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        progress_bar = self.create_cosmic_progress_bar(progress)
        effect_emojis = " ".join(["‚≠ê"] * int(progress * 6))
        
        return (
            f"{phase_text}"
            f"{frame} {frame} {frame}\n\n"
            f"{board}\n"
            f"{progress_bar}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô {effect_emojis}\n"
            f"üöÄ *–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: {int(progress * 100)}%*"
        )
    
    def create_cosmic_progress_bar(self, progress, length=20):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = int(progress * length)
        empty = length - filled
        return f"üåï{'‚≠ê' * filled}{'üåë' * empty}üåï"
    
    def calculate_cosmic_delay(self, phase_idx, frame_idx, progress):
        """–†–∞—Å—á–µ—Ç –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        base_delay = SPIN_DELAY
        
        # –ì–∏–ø–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        if "warp_speed" in ULTRA_ANIMATION_FRAMES["cosmic"]["phases"][phase_idx]["effects"]:
            return base_delay * 0.6  # –°–≤–µ—Ä—Ö—Å–≤–µ—Ç–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        elif progress > 0.8:
            return base_delay * 1.8  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ö–æ–¥–µ –∫ —Ü–µ–ª–∏
        else:
            return base_delay
    
    async def galactic_showcase(self, update, context, message_id, final_reels, bet, chat_id):
        """–ú–ï–ñ–ì–ê–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –®–û–£–ö–ï–ô–°"""
        cosmic_effects = ["üëΩ", "üõ∏", "üåå", "üí´", "üå†", "‚ú®", "‚≠ê", "ü™ê"]
        
        for i in range(8):
            effect = cosmic_effects[i % len(cosmic_effects)]
            
            if i % 2 == 0:
                board = self.format_cosmic_showcase_board(final_reels, effect, True)
            else:
                board = self.format_cosmic_showcase_board(final_reels, effect, False)
            
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üöÄ *Cosmic Jackpot ULTRA*\n\n{effect} *–ì–ê–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢!* {effect}\n\n{board}\nüí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô",
                parse_mode='Markdown'
            )
            await asyncio.sleep(0.35)
    
    def format_cosmic_showcase_board(self, reels, effect, enhanced=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–ª—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —à–æ—É–∫–µ–π—Å–∞"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for row in reels:
            if enhanced:
                formatted_row = [f"{effect}{symbol}" for symbol in row]
            else:
                formatted_row = row
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    async def create_galactic_result(self, final_reels, win_amount, multiplier, lines, cosmic_jackpot, alien_invasion, bet):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        board = self.format_ultra_cosmic_board(final_reels, lines if win_amount > 0 else [])
        
        if alien_invasion:
            result_emoji = "üëΩ"
            result_text = f"*–ò–ù–û–ü–õ–ê–ù–ï–¢–ù–û–ï –í–¢–û–†–ñ–ï–ù–ò–ï!* üõ∏"
            win_info = f"üí∞ *–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üåå"
            sticker_id = STICKER_IDS["epic_win"]
        elif cosmic_jackpot:
            result_emoji = "üåå"
            result_text = f"*–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –î–ñ–ï–ö–ü–û–¢!* üöÄ"
            win_info = f"üí∞ *–ú–ï–ñ–ì–ê–õ–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üí´"
            sticker_id = STICKER_IDS["jackpot"]
        elif win_amount > 0:
            result_emoji = "‚≠ê"
            result_text = f"*–û–†–ë–ò–¢–ê–õ–¨–ù–ê–Ø –ü–û–ë–ï–î–ê!* üõ∞Ô∏è"
            win_info = f"üí∞ *–í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!* (x{multiplier})"
            sticker_id = STICKER_IDS["win"]
        else:
            result_emoji = "ü™ê"
            result_text = f"*–°–ª–µ–¥—É—é—â–∞—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞ –∂–¥–µ—Ç!* üå†"
            win_info = f"üí∏ *–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç*"
            sticker_id = STICKER_IDS["lose"]
        
        result_message = (
            f"üöÄ *Cosmic Jackpot ULTRA - –†–ï–ó–£–õ–¨–¢–ê–¢!* {result_emoji}\n\n"
            f"{board}\n"
            f"üååüå†‚≠êüí´‚ú®üåïü™êüåôüå†üåå\n"
            f"{result_text}\n"
            f"{win_info}\n"
        )
        
        if lines and win_amount > 0:
            result_message += f"üì° *–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–±–∏—Ç—ã:* {', '.join(lines)}\n"
        
        if alien_invasion:
            result_message += f"\nüëΩ *–ò–ù–û–ü–õ–ê–ù–ï–¢–Ø–ù–ï –° –í–ê–ú–ò!* üõ∏\n"
            result_message += f"üåå *–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏–ª—ã –ø—Ä–∏–Ω–µ—Å–ª–∏ —É–¥–∞—á—É!* ‚ú®\n"
        elif cosmic_jackpot:
            result_message += f"\nüöÄ *–ö–û–°–ú–ò–ß–ï–°–ö–ò–ô –î–ñ–ï–ö–ü–û–¢!* üåå\n"
            result_message += f"üí´ *–í—ã –ø–æ–∫–æ—Ä–∏–ª–∏ –≥–∞–ª–∞–∫—Ç–∏–∫—É!* ü™ê\n"
        
        return result_message, win_amount, sticker_id
    
    def format_ultra_cosmic_board(self, reels, winning_lines):
        """–£–ª—å—Ç—Ä–∞-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –¥–æ—Å–∫–∏"""
        if not winning_lines:
            return self.format_cosmic_showcase_board(reels, "", False)
        
        highlighted = [row.copy() for row in reels]
        
        for line in winning_lines:
            if "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å" in line:
                i = int(line.split()[1]) - 1
                for j in range(self.cols):
                    highlighted[i][j] = f"‚≠ê{highlighted[i][j]}"
            elif "–í–µ—Ä—Ç–∏–∫–∞–ª—å" in line:
                # –í Cosmic Jackpot –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
                pass
        
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        for row in highlighted:
            board += "‚îÇ " + " ".join(row) + " ‚îÇ\n"
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def calculate_cosmic_win(self, reels, bet):
        """–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
        lines = []
        multiplier = 0
        cosmic_jackpot = False
        alien_invasion = False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (3-5 —Å–∏–º–≤–æ–ª–æ–≤)
        for i in range(self.rows):
            for length in [5, 4, 3]:
                for j in range(self.cols - length + 1):
                    if len(set(reels[i][j:j+length])) == 1:
                        line_name = f"–û—Ä–±–∏—Ç–∞ {i+1}-{j+1}"
                        lines.append(line_name)
                        symbol_multiplier = self.get_cosmic_symbol_multiplier(reels[i][j], length)
                        multiplier += symbol_multiplier
                        break
        
        # –ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ (3+ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω)
        alien_count = sum(row.count("üëΩ") for row in reels)
        if alien_count >= 3:
            alien_invasion = True
            multiplier += ULTRA_MULTIPLIERS["cosmic"]["alien_bonus"] * alien_count
        
        # –ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π –±–æ–Ω—É—Å
        planet_count = sum(row.count("ü™ê") + row.count("üåç") for row in reels)
        if planet_count >= 4:
            multiplier += ULTRA_MULTIPLIERS["cosmic"]["planet_combo"]
        
        # –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –¥–∂–µ–∫–ø–æ—Ç (–æ—Å–æ–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)
        if self.check_cosmic_jackpot(reels):
            cosmic_jackpot = True
            multiplier += ULTRA_MULTIPLIERS["cosmic"]["cosmic_jackpot"]
        
        # –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–æ–Ω—É—Å (–≤—Å–µ —Ä–∞–∑–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
        unique_cosmic = len(set(symbol for row in reels for symbol in row if symbol in ["üöÄ", "üõ∏", "üëΩ", "ü™ê", "üåç"]))
        if unique_cosmic >= 4:
            multiplier += ULTRA_MULTIPLIERS["cosmic"]["galactic_bonus"]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å –Ω–∞ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω–æ–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏–µ
        if random.random() < 0.003:  # 0.3% —à–∞–Ω—Å
            alien_invasion = True
            multiplier *= 3
        
        win_amount = bet * multiplier if multiplier > 0 else -bet
        return win_amount, multiplier, lines, cosmic_jackpot, alien_invasion
    
    def get_cosmic_symbol_multiplier(self, symbol, length):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è"""
        base_multipliers = {
            3: ULTRA_MULTIPLIERS["cosmic"]["three_in_row"],
            4: ULTRA_MULTIPLIERS["cosmic"]["four_in_row"], 
            5: ULTRA_MULTIPLIERS["cosmic"]["five_in_row"]
        }
        
        base = base_multipliers.get(length, 1)
        
        if symbol in ULTRA_SYMBOLS["cosmic"]["legendary"]:
            return base * 3
        elif symbol in ULTRA_SYMBOLS["cosmic"]["epic"]:
            return base * 2
        elif symbol in ULTRA_SYMBOLS["cosmic"]["rare"]:
            return base * 1.5
        else:
            return base
    
    def check_cosmic_jackpot(self, reels):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∂–µ–∫–ø–æ—Ç–∞"""
        # –î–∂–µ–∫–ø–æ—Ç: –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ò –µ—Å—Ç—å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω
        middle_row = reels[1]
        if len(set(middle_row)) == 1 and "üëΩ" in [symbol for row in reels for symbol in row]:
            return True
        return False