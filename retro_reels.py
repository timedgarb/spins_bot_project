import random
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from config import STICKER_IDS, SPIN_DELAY, ULTRA_ANIMATION_FRAMES, ULTRA_MULTIPLIERS, ULTRA_SYMBOLS

class RetroReelsULTRA:
    def __init__(self):
        self.symbols = (ULTRA_SYMBOLS["retro"]["common"] + 
                       ULTRA_SYMBOLS["retro"]["rare"] + 
                       ULTRA_SYMBOLS["retro"]["epic"] + 
                       ULTRA_SYMBOLS["retro"]["legendary"])
        self.name = "Retro Reels ULTRA"
        self.rows = 3
        self.cols = 3
    
    async def spin_with_animation(self, bet: int, update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int):
        chat_id = update.effective_chat.id
        final_reels = self.generate_retro_reels()
        win_amount, multiplier, lines, bonus_round, arcade_legend = self.calculate_retro_win(final_reels, bet)
        
        # –†–ï–¢–†–û-–°–ò–ö–í–ï–ù–° –ê–ù–ò–ú–ê–¶–ò–ò
        await self.retro_cinematic_sequence(update, context, message_id, bet, final_reels, chat_id)
        
        # –ê–†–ö–ê–î–ù–´–ô –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
        result_data = await self.create_arcade_result(final_reels, win_amount, multiplier, lines, bonus_round, arcade_legend, bet)
        
        return result_data
    
    def generate_retro_reels(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ç—Ä–æ-—Ä–µ–µ–ª—Å–æ–≤ —Å –ø–∏–∫—Å–µ–ª—å–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏"""
        reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ü–∏–∫—Å–µ–ª—å–Ω–∞—è –≤–µ—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
                weights = [40, 30, 20, 10]  # common, rare, epic, legendary
                symbol_pool = []
                categories = list(ULTRA_SYMBOLS["retro"].keys())
                
                for idx, weight in enumerate(weights):
                    symbol_pool.extend([ULTRA_SYMBOLS["retro"][categories[idx]][0]] * weight)
                
                # –†–µ—Ç—Ä–æ-–±–æ–Ω—É—Å: —É–≥–ª—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –∫ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
                if (i == 0 and j == 0) or (i == 2 and j == 2):
                    symbol_pool.extend(ULTRA_SYMBOLS["retro"]["legendary"] * 3)
                
                row.append(random.choice(symbol_pool))
            reels.append(row)
        return reels
    
    async def retro_cinematic_sequence(self, update, context, message_id, bet, final_reels, chat_id):
        """–†–ï–¢–†–û-–ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨"""
        phases = ULTRA_ANIMATION_FRAMES["retro"]["phases"]
        
        for phase_idx, phase in enumerate(phases):
            phase_text = phase["text"]
            frames = phase["frames"]
            effects = phase["effects"]
            
            for frame_idx, frame in enumerate(frames):
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ-–±–∞—Ä–∞–±–∞–Ω–æ–≤
                progress = (phase_idx * len(frames) + frame_idx) / (len(phases) * len(frames))
                temp_reels = self.create_pixel_reels(final_reels, progress, effects)
                
                # –ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏
                board = self.format_pixel_board(temp_reels, effects, frame_idx)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
                message = self.create_retro_message(phase_text, frame, board, bet, effects, progress)
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=message,
                    parse_mode='Markdown'
                )
                
                # –†–µ—Ç—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞—Ä–∫–∞–¥–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                retro_delay = self.calculate_retro_delay(phase_idx, frame_idx, progress)
                await asyncio.sleep(retro_delay)
        
        # –ê–†–ö–ê–î–ù–´–ô –®–û–£–ö–ï–ô–°
        await self.arcade_showcase(update, context, message_id, final_reels, bet, chat_id)
    
    def create_pixel_reels(self, final_reels, progress, effects):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤"""
        temp_reels = []
        for i in range(self.rows):
            row = []
            for j in range(self.cols):
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
                reveal_chance = min(1.0, progress * 1.4 + random.random() * 0.2)
                
                if random.random() < reveal_chance:
                    row.append(final_reels[i][j])
                else:
                    # –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∑
                    if "pixel_explosion" in effects:
                        row.append(random.choice(["üî¥", "üü¢", "üü°", "üîµ"]))
                    elif "color_cycle" in effects:
                        colors = ["üî¥", "üü¢", "üü°", "üîµ", "üü£", "üü†"]
                        row.append(random.choice(colors))
                    else:
                        row.append(random.choice(self.symbols))
            temp_reels.append(row)
        return temp_reels
    
    def format_pixel_board(self, reels, effects, frame_idx):
        """–ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for i, row in enumerate(reels):
            formatted_row = []
            for j, symbol in enumerate(row):
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                if "scan_lines" in effects and i % 2 == 0:
                    formatted_symbol = f"‚ñ¨{symbol}"
                elif "pixel_glitch" in effects and frame_idx % 3 == 0:
                    formatted_symbol = f"‚ñì{symbol}"
                elif "crt_effect" in effects:
                    formatted_symbol = f"‚óº{symbol}"
                else:
                    formatted_symbol = symbol
                formatted_row.append(formatted_symbol)
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def create_retro_message(self, phase_text, frame, board, bet, effects, progress):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        progress_bar = self.create_retro_progress_bar(progress)
        effect_emojis = " ".join(["üëæ"] * int(progress * 4))
        
        return (
            f"{phase_text}"
            f"{frame} {frame} {frame}\n\n"
            f"{board}\n"
            f"{progress_bar}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô {effect_emojis}\n"
            f"üïπÔ∏è *–ê—Ä–∫–∞–¥–Ω—ã–π —Ä–µ–∂–∏–º: {int(progress * 100)}%*"
        )
    
    def create_retro_progress_bar(self, progress, length=20):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ-–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = int(progress * length)
        empty = length - filled
        return f"üü•{'üü©' * filled}{'‚¨õ' * empty}üü•"
    
    def calculate_retro_delay(self, phase_idx, frame_idx, progress):
        """–†–∞—Å—á–µ—Ç —Ä–µ—Ç—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∏"""
        base_delay = SPIN_DELAY
        
        # –ê—Ä–∫–∞–¥–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        if "pixel_explosion" in ULTRA_ANIMATION_FRAMES["retro"]["phases"][phase_idx]["effects"]:
            return base_delay * 0.7  # –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º
        elif progress > 0.75:
            return base_delay * 1.6  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è –¥—Ä–∞–º—ã
        else:
            return base_delay
    
    async def arcade_showcase(self, update, context, message_id, final_reels, bet, chat_id):
        """–ê–†–ö–ê–î–ù–´–ô –®–û–£–ö–ï–ô–°"""
        arcade_effects = ["üëæ", "üïπÔ∏è", "üéÆ", "üíæ", "üì∫", "üî¥", "üü¢", "üü°"]
        
        for i in range(6):
            effect = arcade_effects[i % len(arcade_effects)]
            
            if i % 2 == 0:
                board = self.format_arcade_showcase_board(final_reels, effect, True)
            else:
                board = self.format_arcade_showcase_board(final_reels, effect, False)
            
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"üïπÔ∏è *Retro Reels ULTRA*\n\n{effect} *–ê–†–ö–ê–î–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!* {effect}\n\n{board}\nüí∞ –°—Ç–∞–≤–∫–∞: {bet} ü™ô",
                parse_mode='Markdown'
            )
            await asyncio.sleep(0.4)
    
    def format_arcade_showcase_board(self, reels, effect, enhanced=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –¥–ª—è –∞—Ä–∫–∞–¥–Ω–æ–≥–æ —à–æ—É–∫–µ–π—Å–∞"""
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        
        for row in reels:
            if enhanced:
                formatted_row = [f"{effect}{symbol}" for symbol in row]
            else:
                formatted_row = row
            
            board += f"‚îÇ {' '.join(formatted_row)} ‚îÇ\n"
        
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    async def create_arcade_result(self, final_reels, win_amount, multiplier, lines, bonus_round, arcade_legend, bet):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–∫–∞–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        board = self.format_ultra_retro_board(final_reels, lines if win_amount > 0 else [])
        
        if arcade_legend:
            result_emoji = "üëë"
            result_text = f"*–õ–ï–ì–ï–ù–î–ê –ê–†–ö–ê–î–´!* üèÜ"
            win_info = f"üí∞ *–≠–ü–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®: {win_amount} –ú–û–ù–ï–¢!* üíØ"
            sticker_id = STICKER_IDS["epic_win"]
        elif bonus_round:
            result_emoji = "üé∞"
            result_text = f"*–ë–û–ù–£–°–ù–´–ô –†–ê–£–ù–î!* üéÆ"
            win_info = f"üí∞ *–°–£–ü–ï–† –í–´–ò–ì–†–´–®: {win_amount} –º–æ–Ω–µ—Ç!* üëæ"
            sticker_id = STICKER_IDS["bonus"]
        elif win_amount > 0:
            result_emoji = "üéâ"
            result_text = f"*HIGH SCORE!* ‚≠ê"
            win_info = f"üí∞ *–í—ã–∏–≥—Ä—ã—à: {win_amount} –º–æ–Ω–µ—Ç!* (x{multiplier})"
            sticker_id = STICKER_IDS["win"]
        else:
            result_emoji = "üïπÔ∏è"
            result_text = f"*GAME OVER!* üîÑ"
            win_info = f"üí∏ *–°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç*"
            sticker_id = STICKER_IDS["lose"]
        
        result_message = (
            f"üïπÔ∏è *Retro Reels ULTRA - –†–ï–ó–£–õ–¨–¢–ê–¢!* {result_emoji}\n\n"
            f"{board}\n"
            f"üëæüïπÔ∏èüéÆüíæüì∫üî¥üü¢üü°üîµüëæ\n"
            f"{result_text}\n"
            f"{win_info}\n"
        )
        
        if lines and win_amount > 0:
            result_message += f"üìä *–ö–æ–º–±–æ –ª–∏–Ω–∏–∏:* {', '.join(lines)}\n"
        
        if arcade_legend:
            result_message += f"\nüèÜ *–í–´ –°–¢–ê–õ–ò –õ–ï–ì–ï–ù–î–û–ô!* üëë\n"
            result_message += f"üéÆ *–ê—Ä–∫–∞–¥–Ω—ã–µ –±–æ–≥–∏ —Å –≤–∞–º–∏!* üëæ\n"
        elif bonus_round:
            result_message += f"\nüé∞ *–ë–û–ù–£–° –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!* üéÆ\n"
            result_message += f"üí´ *–†–µ—Ç—Ä–æ-—É–¥–∞—á–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º–µ!* üïπÔ∏è\n"
        
        return result_message, win_amount, sticker_id
    
    def format_ultra_retro_board(self, reels, winning_lines):
        """–£–ª—å—Ç—Ä–∞-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ç—Ä–æ-–¥–æ—Å–∫–∏"""
        if not winning_lines:
            return self.format_arcade_showcase_board(reels, "", False)
        
        highlighted = [row.copy() for row in reels]
        
        for line in winning_lines:
            if "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å" in line:
                i = int(line.split()[1]) - 1
                for j in range(3):
                    highlighted[i][j] = f"üëæ{highlighted[i][j]}"
            elif "–í–µ—Ä—Ç–∏–∫–∞–ª—å" in line:
                j = int(line.split()[1]) - 1
                for i in range(3):
                    highlighted[i][j] = f"üëæ{highlighted[i][j]}"
            elif "–î–∏–∞–≥–æ–Ω–∞–ª—å" in line:
                if "‚ÜòÔ∏è" in line:
                    for i in range(3):
                        highlighted[i][i] = f"üëæ{highlighted[i][i]}"
                else:
                    for i in range(3):
                        highlighted[i][2-i] = f"üëæ{highlighted[i][2-i]}"
        
        board = "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        for row in highlighted:
            board += "‚îÇ " + " ".join(row) + " ‚îÇ\n"
        board += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        return f"```\n{board}```"
    
    def calculate_retro_win(self, reels, bet):
        """–†–µ—Ç—Ä–æ-—Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
        lines = []
        multiplier = 0
        bonus_round = False
        arcade_legend = False
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–Ω–∏–∏
        for i in range(self.rows):
            if reels[i][0] == reels[i][1] == reels[i][2]:
                lines.append(f"–õ–∏–Ω–∏—è {i+1}")
                symbol_multiplier = self.get_retro_symbol_multiplier(reels[i][0])
                multiplier += symbol_multiplier
        
        for j in range(self.cols):
            if reels[0][j] == reels[1][j] == reels[2][j]:
                lines.append(f"–ö–æ–ª–æ–Ω–∫–∞ {j+1}")
                symbol_multiplier = self.get_retro_symbol_multiplier(reels[0][j])
                multiplier += symbol_multiplier
        
        if reels[0][0] == reels[1][1] == reels[2][2]:
            lines.append("–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜòÔ∏è")
            multiplier += ULTRA_MULTIPLIERS["retro"]["diagonal"]
        
        if reels[0][2] == reels[1][1] == reels[2][0]:
            lines.append("–î–∏–∞–≥–æ–Ω–∞–ª—å ‚ÜôÔ∏è")
            multiplier += ULTRA_MULTIPLIERS["retro"]["diagonal"]
        
        # –ë–æ–Ω—É—Å–Ω—ã–π —Ä–∞—É–Ω–¥ (—à–∞–Ω—Å + –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)
        if random.random() < 0.15 and any(reels[i][j] in ULTRA_SYMBOLS["retro"]["epic"] for i in range(3) for j in range(3)):
            bonus_round = True
            multiplier += ULTRA_MULTIPLIERS["retro"]["bonus_round"]
        
        # –ü–∏–∫—Å–µ–ª—å–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞)
        color_symbols = [s for s in [symbol for row in reels for symbol in row] if s in ["üî¥", "üü¢", "üü°", "üîµ"]]
        if len(set(color_symbols)) >= 3:
            multiplier += ULTRA_MULTIPLIERS["retro"]["pixel_perfect"]
        
        # –õ–µ–≥–µ–Ω–¥–∞ –∞—Ä–∫–∞–¥—ã (–æ—Å–æ–±–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)
        if self.check_arcade_legend(reels):
            arcade_legend = True
            multiplier += ULTRA_MULTIPLIERS["retro"]["arcade_legend"]
        
        # –†–µ—Ç—Ä–æ-–∫–æ–º–±–æ
        unique_retro = len(set(symbol for row in reels for symbol in row))
        if unique_retro >= 7:
            multiplier += ULTRA_MULTIPLIERS["retro"]["retro_combo"]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–π —à–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥—É –∞—Ä–∫–∞–¥—ã
        if random.random() < 0.004:  # 0.4% —à–∞–Ω—Å
            arcade_legend = True
            multiplier *= 2
        
        win_amount = bet * multiplier if multiplier > 0 else -bet
        return win_amount, multiplier, lines, bonus_round, arcade_legend
    
    def get_retro_symbol_multiplier(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ç—Ä–æ-–º–Ω–æ–∂–∏—Ç–µ–ª—è"""
        if symbol in ULTRA_SYMBOLS["retro"]["legendary"]:
            return ULTRA_MULTIPLIERS["retro"]["three_horizontal"] * 2
        elif symbol in ULTRA_SYMBOLS["retro"]["epic"]:
            return ULTRA_MULTIPLIERS["retro"]["three_horizontal"] * 1.5
        elif symbol in ULTRA_SYMBOLS["retro"]["rare"]:
            return ULTRA_MULTIPLIERS["retro"]["three_horizontal"]
        else:
            return ULTRA_MULTIPLIERS["retro"]["three_horizontal"] * 0.8
    
    def check_arcade_legend(self, reels):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–≥–µ–Ω–¥—ã –∞—Ä–∫–∞–¥—ã"""
        # –õ–µ–≥–µ–Ω–¥–∞: –≤—Å–µ —É–≥–ª—ã + —Ü–µ–Ω—Ç—Ä - –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        corners_and_center = [reels[0][0], reels[0][2], reels[2][0], reels[2][2], reels[1][1]]
        return all(symbol in ULTRA_SYMBOLS["retro"]["legendary"] for symbol in corners_and_center)